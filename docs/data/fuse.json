{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"个人知识库","n":1},"1":{"v":"\n记录我在工作和学习中掌握到的软件开发主题的知识。\n\n## 已完成\n\n![[个人介绍 | about me#简介:#*]]\n\n## 施工中\n\n![[programming-languages.python#介绍:#*]]\n![[basic.hardware#计算机组成:#*]]\n","n":0.408}}},{"i":2,"$":{"0":{"v":"软件开发","n":1}}},{"i":3,"$":{"0":{"v":"Config","n":1}}},{"i":4,"$":{"0":{"v":"Toml","n":1}}},{"i":5,"$":{"0":{"v":"Tools","n":1}}},{"i":6,"$":{"0":{"v":"Editor","n":1}}},{"i":7,"$":{"0":{"v":"Visual Studio Code","n":0.577}}},{"i":8,"$":{"0":{"v":"重构","n":1}}},{"i":9,"$":{"0":{"v":"Mobile Application","n":0.707}}},{"i":10,"$":{"0":{"v":"前端","n":1}}},{"i":11,"$":{"0":{"v":"Dev Ops","n":0.707}}},{"i":12,"$":{"0":{"v":"Desktop Application","n":0.707}}},{"i":13,"$":{"0":{"v":"Command Line Tools","n":0.577}}},{"i":14,"$":{"0":{"v":"VCS","n":1}}},{"i":15,"$":{"0":{"v":"git","n":1}}},{"i":16,"$":{"0":{"v":"Testing","n":1}}},{"i":17,"$":{"0":{"v":"Unit Testing","n":0.707}}},{"i":18,"$":{"0":{"v":"持续集成","n":1}}},{"i":19,"$":{"0":{"v":"持续部署","n":1}}},{"i":20,"$":{"0":{"v":"API","n":1}}},{"i":21,"$":{"0":{"v":"gRPC","n":1}}},{"i":22,"$":{"0":{"v":"REST","n":1}}},{"i":23,"$":{"0":{"v":"Open API Spec","n":0.577}}},{"i":24,"$":{"0":{"v":"GraphQL","n":1}}},{"i":25,"$":{"0":{"v":"Authentication","n":1}}},{"i":26,"$":{"0":{"v":"安全","n":1}}},{"i":27,"$":{"0":{"v":"OWASP","n":1}}},{"i":28,"$":{"0":{"v":"HTTPS","n":1}}},{"i":29,"$":{"0":{"v":"资源","n":1}}},{"i":30,"$":{"0":{"v":"Sites","n":1},"1":{"v":"\n## Python\n\n- [Full Stack Python](https://www.fullstackpython.com/)\n- [Python behind the scenes](https://tenthousandmeters.com/tag/python-behind-the-scenes/)\n- [Real Python](https://realpython.com/)\n- [Python Weekly](https://us2.campaign-archive.com/home/?u=e2e180baf855ac797ef407fc7&id=9e26887fc5)\n- [Tag: Python | 那时难决 (duyixian.cn)](https://www.duyixian.cn/tags/Python/)\n","n":0.236}}},{"i":31,"$":{"0":{"v":"Links","n":1},"1":{"v":"\n## Python\n\n- [Building Large Scale Systems and Products with Python | Soroco Engineering](https://engineering.soroco.com/building-large-scale-systems-and-products-with-python/)\n- [A deep dive into the “official” Docker image for Python (pythonspeed.com)](https://pythonspeed.com/articles/official-python-docker-image/)\n","n":0.204}}},{"i":32,"$":{"0":{"v":"Learn","n":1},"1":{"v":"\n## Python\n\n- [面向初学者的 Python - Learn | Microsoft Docs](https://docs.microsoft.com/zh-cn/learn/paths/beginner-python/)\n- [通过 Python 构建真实的应用程序 - Learn | Microsoft Docs](https://docs.microsoft.com/zh-cn/learn/paths/python-language/)\n","n":0.243}}},{"i":33,"$":{"0":{"v":"Books","n":1},"1":{"v":"\n## 基础\n\n- [普林斯顿计算机公开课-布莱恩 W. 柯尼汉](https://weread.qq.com/web/bookDetail/6df32da0719710e26dfd7fe)\n\n## Python\n\n- [流畅的 Python-卢西亚诺·拉马略](https://weread.qq.com/web/bookDetail/ab832620715c017eab864a6)\n","n":0.354}}},{"i":34,"$":{"0":{"v":"编程语言","n":1}}},{"i":35,"$":{"0":{"v":"TypeScript","n":1}}},{"i":36,"$":{"0":{"v":"Rust","n":1}}},{"i":37,"$":{"0":{"v":"Python","n":1},"1":{"v":"\n## 介绍\n\n[Python 教程](https://docs.python.org/zh-cn/3/tutorial/index.html)\n\n> Python 是一门易于学习、功能强大的编程语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程。Python 优雅的语法和动态类型以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的理想语言。\n\n## 特点\n\n- 语法简洁，代码可读性强，易于学习\n- 功能强大，支持多种编程范式（ [[programming-languages.Structural Programming]]，[[programming-languages.Object Orinted Programming]]，[[programming-languages.functional programming]],[[programming-languages.meta programming]] ）\n- 丰富的内置函数和模块\n- 易于扩展（[扩展和嵌入 Python 解释器](https://docs.python.org/zh-cn/3/extending/index.html#extending-index)）\n- 具有活跃的社区和强大的生态\n\n## 应用\n\n- 编写服务端脚本和命令行程序（ [[programming-languages.python.click]] ）\n- 运维/DevOps([[programming-languages.python.Ansible]])\n- 爬虫（[[programming-languages.python.requests]]，[[programming-languages.python.playwright]]，[[programming-languages.python.scrapy]] ）\n- 大数据/机器学习（ [[programming-languages.python.numpy]]，[[programming-languages.python.pandas]]，[[programming-languages.python.Tensorflow]]，[[programming-languages.python.Pytorch]] ）\n- 后端服务开发（ [[programming-languages.python.Flask]]，[[programming-languages.python.Django]]，[[programming-languages.python.FastAPI]] ）\n- 客户端应用程序开发（[[programming-languages.python.PyQT]]）\n\n## Python 之禅\n\n![[Python之禅 | programming-languages.python.Zen of Python#内容:#*]]\n\n## 语言特性\n\n- [[programming-languages.python.builtin types]]\n- [[programming-languages.python.builtin functions]]\n- [[programming-languages.python.type hints]]\n- [[programming-languages.python.modules]]\n- [[programming-languages.python.iterators]]\n- [[programming-languages.python.generators]]\n- [[programming-languages.python.list comprehension]]\n- [[programming-languages.python.decorators]]\n- [[programming-languages.python.context manager]]\n- [[programming-languages.python.structral pattern match]]\n\n## 第三方库\n\n- [Pypi](https://pypi.org/)\n- [[programming-languages.python.pip]]\n- [[programming-languages.python.poetry]]\n\n## 虚拟环境\n\n- [[programming-languages.python.venv]]\n- [[programming-languages.python.pipenv]]\n\n## 资源\n\n![[resources.books#Python:#*]]\n![[resources.learn#Python:#*]]\n![[resources.sites#Python:#*]]\n![[resources.links#Python:#*]]\n","n":0.122}}},{"i":38,"$":{"0":{"v":"Venv","n":1},"1":{"v":"\n## 创建虚拟环境\n\n```shell\nubuntu:tmp/ $ python -m venv .venv                                                                           [20:35:41]\nubuntu:tmp/ $ ls -l -a                                                                                       [20:35:49]\n总用量 12\ndrwxrwxr-x  3 ubuntu ubuntu 4096 8月  13 20:35 .\ndrwxr-xr-x 43 ubuntu ubuntu 4096 8月  13 20:35 ..\ndrwxrwxr-x  5 ubuntu ubuntu 4096 8月  13 20:35 .venv\n```\n\n## 激活虚拟环境\n\n```shell\nubuntu:tmp/ $ source .venv/bin/activate                                                                      [20:37:29]\n(.venv) ubuntu:tmp/ $ which python                                                                           [20:38:01]\n/home/ubuntu/tmp/.venv/bin/python\n(.venv) ubuntu:tmp/ $                                                                                        [20:38:07]\n```","n":0.14}}},{"i":39,"$":{"0":{"v":"Type Hints","n":0.707},"1":{"v":"\n## 介绍\n\n[typing —— 类型注解支持 — Python 3.10.6 文档](https://docs.python.org/zh-cn/3/library/typing.html#module-typing)\n\n## 应用场景\n\n- IDE 提示（ [[software-develop.tools.editor.Visual Studio Code]] ）\n- 静态分析（ [[programming-languages.python.mypy]] ）\n- 运行时获取类型信息（ [[programming-languages.python.modules#dataclasses]] [[programming-languages.python.pydantic]] [[programming-languages.python.FastAPI]] ）\n","n":0.209}}},{"i":40,"$":{"0":{"v":"结构化模式匹配","n":1},"1":{"v":"\n## 介绍\n\n[Python 3.10 中的模式匹配 | 那时难决 (duyixian.cn)](https://www.duyixian.cn/2021/03/19/Structural%20Pattern%20Matching%20In%20Python%203.10/)\n\n## 示例\n\n```python\n# 快速排序的一个概念性实现\ndef quicksort(arr: list[int]) -> list[int]:\n    match arr:\n        case first,:\n            return [first]\n        case first, second:\n            return [first, second] if first <= second else [second, first]\n        case first, *rest:\n            return (\n                quicksort([num for num in rest if num <= first])\n                + [first]\n                + quicksort([num for num in rest if num > first])\n            )\n```\n","n":0.13}}},{"i":41,"$":{"0":{"v":"Scrapy","n":1}}},{"i":42,"$":{"0":{"v":"Requests","n":1}}},{"i":43,"$":{"0":{"v":"Pydantic","n":1}}},{"i":44,"$":{"0":{"v":"Poetry","n":1},"1":{"v":"\n## 简介\n\n[Poetry](https://python-poetry.org/)是一个基于pyproject.toml的工具，利用poetry可以更加方便地进行 Python 项目的开发、构建、发布和依赖管理。\n\n## 使用\n\n参考文章[使用poetry进行Python项目开发](https://www.duyixian.cn/2020/11/23/poetry/)","n":0.447}}},{"i":45,"$":{"0":{"v":"Playwright","n":1}}},{"i":46,"$":{"0":{"v":"Pipenv","n":1},"1":{"v":"\n## 介绍\n\n[pipenv](https://pypi.org/project/pipenv/)是一个 Python 虚拟环境与包管理工具。可以理解为一个 Python 版本的 npm。\n\npipenv使用Pipfile定义项目的元信息（依赖，Python版本等）。\n\nPipfile使用[[software-develop.config.toml]]格式，下面是一个典型的[Pipfile](https://github.com/duyixian1234/fastapi-template/blob/master/Pipfile)的内容。\n\n```toml\n[[source]] # 设置pypi源信息\nurl = \"https://mirrors.tencent.com/pypi/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages] # 维护依赖\nfastapi = \"*\"\nuvicorn = \"*\"\nuvloop = \"*\"\nhttptools = \"*\"\n\n[dev-packages] # 维护开发依赖\npylint = \"*\"\nisort = \"*\"\nmypy = \"*\"\npytest = \"*\"\npytest-cov = \"*\"\nblack = \"*\"\nrequests = \"*\"\n\n[requires] # 指定Python版本\npython_version = \"3.9\"\n\n[pipenv] # 额外设置\nallow_prereleases = true\n\n```","n":0.143}}},{"i":47,"$":{"0":{"v":"Pip","n":1},"1":{"v":"\n## 升级 pip\n\n```shell\n$ python -m pip install -U pip\n```\n\n## 指定 Pypi 源\n\n### 镜像地址\n\n| 镜像   | 地址                                          |\n| ------ | --------------------------------------------- |\n| 豆瓣   | https://pypi.doubanio.com/simple/             |\n| 阿里云 | https://mirrors.aliyun.com/pypi/simple        |\n| 腾讯云 | https://mirrors.cloud.tencent.com/pypi/simple |\n\n### 安装时指定\n\n```shell\n$ pip install flask -i https://mirrors.tencent.com/pypi/simple\n```\n\n### 修改 requirements.txt\n\n第一行加入`-i https://mirrors.tencent.com/pypi/simple`\n\n### 设置为默认值\n\n修改`$HOME/.config/pip/pip.conf`\n\n```ini\n[global]\ntimeout = 60\nindex-url = https://pypi.doubanio.com/simple/\nNPM\n```\n","n":0.146}}},{"i":48,"$":{"0":{"v":"Pandas","n":1}}},{"i":49,"$":{"0":{"v":"Numpy","n":1}}},{"i":50,"$":{"0":{"v":"Mypy","n":1}}},{"i":51,"$":{"0":{"v":"标准库模块","n":1},"1":{"v":"\n## itertools\n\n## dataclasses\n","n":0.577}}},{"i":52,"$":{"0":{"v":"列表（字典， 集合）推导式","n":0.707},"1":{"v":"\n## 基本用法\n\n```python\nassert [x for x in range(10) if x % 2] == [1, 3, 5, 7, 9]\nassert {x for x in range(10) if x % 2} == {1, 3, 5, 7, 9}\nassert {x: x**2 for x in range(10)} == {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n```\n\n## 内部实现\n\n使用`get_iter`指令，效率高于 map/filter 函数\n\n```python\n>>> import dis\n>>> dis.dis(\"[x for x in 'abc']\")\n1           0 LOAD_CONST               0 (<code object <listcomp> at 0x000001F3D5502E40, file \"<dis>\", line 1>)\n              2 LOAD_CONST               1 ('<listcomp>')\n              4 MAKE_FUNCTION            0\n              6 LOAD_CONST               2 ('abc')\n              8 GET_ITER\n             10 CALL_FUNCTION            1\n             12 RETURN_VALUE\n\nDisassembly of <code object <listcomp> at 0x000001F3D5502E40, file \"<dis>\", line 1>:\n  1           0 BUILD_LIST               0\n              2 LOAD_FAST                0 (.0)\n        >>    4 FOR_ITER                 4 (to 14)\n              6 STORE_FAST               1 (x)\n              8 LOAD_FAST                1 (x)\n             10 LIST_APPEND              2\n             12 JUMP_ABSOLUTE            2 (to 4)\n        >>   14 RETURN_VALUE\n```\n\n```python\n>>> import timeit\ncomprehension = timeit.timeit(\"[x.upper() for x in 'abc']\", number=10000)\nmap_function = timeit.timeit(\"list(map(str.upper, 'abc'))\", number=10000)\nprint(f'{comprehension=} vs {map_function=}')\n\ncomprehension=0.003946700002416037 vs map_function=0.0069931999896653\n```\n","n":0.079}}},{"i":53,"$":{"0":{"v":"迭代器","n":1},"1":{"v":"\n## 简介\n\n[迭代器类型](https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator-types)\n\n## 创建迭代器\n\n- iter 函数\n- [[programming-languages.python.modules#itertools]]\n","n":0.408}}},{"i":54,"$":{"0":{"v":"生成器","n":1},"1":{"v":"\n## 介绍\n\n[生成器类型](https://docs.python.org/zh-cn/3/library/stdtypes.html#generator-types)\n\n## yield 表达式\n\n[yield 表达式](https://docs.python.org/zh-cn/3/reference/expressions.html#yield-expressions)\n\n## 特点\n\n- 惰性计算\n- 节省内存\n\n## 示例\n\n```python\nimport itertools\n\n\ndef fib():\n    a, b = 1, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nassert list(itertools.takewhile(lambda x: x < 100, fib())) == [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```\n","n":0.149}}},{"i":55,"$":{"0":{"v":"装饰器","n":1},"1":{"v":"\n## 介绍\n\n> decorator -- 装饰器返回值为另一个函数的函数，通常使用 `@wrapper` 语法形式来进行函数变换。装饰器的常见例子包括 `classmethod` 和 `staticmethod`。\n>\n> 装饰器语法只是一种语法糖，以下两个函数定义在语义上完全等价:\n>\n> ```python\n> def f(arg):\n>     ...\n> f = staticmethod(f)\n>\n> @staticmethod\n> def f(arg):\n>     ...\n> ```\n\n## 示例\n\n```python\ndef log_call(func):\n    def wrapper(*args, **kwargs):\n        print(f'Function {func.__name__} Called With ({args}, {kwargs})')\n        return func(*args, **kwargs)\n    return wrapper\n\n@log_call\ndef add(x, y):\n    return x + y\n\nassert add(1, 2) == 3 # Function add Called With ((1, 2), {})\n```\n","n":0.132}}},{"i":56,"$":{"0":{"v":"上下文管理器","n":1},"1":{"v":"\n## 介绍\n\n[RAII 概念与在 Python 中的应用 | 那时难决 (duyixian.cn)](https://www.duyixian.cn/2021/08/22/RAII/)\n\n## 示例\n\n```python\nclass MyContextManager:\n    def __init__(self):\n        self.used = False\n    def __enter__(self):\n        print('entering')\n        self.used = True\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('exiting')\n\nwith MyContextManager() as cm:\n    print('in context')\n    assert cm.used\n```\n","n":0.167}}},{"i":57,"$":{"0":{"v":"Click","n":1}}},{"i":58,"$":{"0":{"v":"内置类型","n":1},"1":{"v":"\n参考[【使用 Python 实现算法】02 原生类型与内置函数 | 那时难决 (duyixian.cn)](https://www.duyixian.cn/2022/06/27/2022-06-27%20algorithms%20in%20python%2002/#int)\n\n## int\n\n- int.bit_count\n- int.bit_length\n\n## float\n\n- float.as_integer_ration\n- 格式化：`f\"{1/3:.4f}\" == \"0.3333\" `\n\n## list\n\n- 获取并删除指定位置的元素（O(n)复杂度）：list.pop(n)\n\n## tuple\n\n- tuple 对象可以作为字典的键\n\n## dict\n\n- dict.fromkeys\n- 可使用[[字典推导式|programming-languages.python.list comprehension]]初始化 dict：`{ch: count for ch, count in [(\"a\", 1), (\"b\", 2), (\"c\", 3)]} == {\"a\": 1, \"b\": 2, \"c\": 3}`\n- 可使用`|`合并 dict，`{1: 2, 2: 3} | {2: 4, 3: 5} == {1: 2, 2: 4, 3: 5}`\n\n## set\n\n- 可使用[[集合推导式|programming-languages.python.list comprehension]]初始化 set：`{x for x in range(10) if x % 2 == 0} == {0, 2, 4, 6, 8}`\n- set 支持的一些运算符：`&` `|` `-` `>` `>=` `<` `<=`\n\n## str\n\n- 使用各类 str.isxxx 方法检查字符串内容\n- str.partition： `assert \"A B C\".partition(\" \") == (\"A\", \" \", \"B C\") `\n","n":0.097}}},{"i":59,"$":{"0":{"v":"内置函数","n":1},"1":{"v":"\n参考[【使用 Python 实现算法】02 原生类型与内置函数 | 那时难决 (duyixian.cn)](https://www.duyixian.cn/2022/06/27/2022-06-27%20algorithms%20in%20python%2002/#int)\n\n## round\n\nPython 的 round 实现为银行家算法，四舍六入五成双\n\n```python\nassert round(1.2) == 1\nassert round(1.6) == 2\nassert round(1.5) == 2\nassert round(2.5) == 2\n```\n\n## all, any\n\n会提前返回\n\n## next\n\n可以应用在获取第一个符合条件的元素的场景。\n\n```python\nassert next(x for x in range(1, 10) if x % 3 == 0) == 3\n```\n\n## enumerate\n\n```python\nfor index, ch in enumerate(\"abc\"):\n    pass\n```\n\n## map, filter\n\n返回一个[[迭代器 | programming-languages.python.iterators]]，可使用列表推导式替换\n\n## sorted\n\n返回的是一个 list\n\n## zip\n\n可用于初始化 dict\n\n```python\nassert dict(zip('abcd', range(4))) == {'a': 0, 'b': 1, 'c': 2, 'd': 3}\n```\n\n可以使用 zip 进行矩阵转置。\n\n```python\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert [list(row) for row in zip(*matrix)] == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n```\n","n":0.104}}},{"i":60,"$":{"0":{"v":"Zen of Python","n":0.577},"1":{"v":"\n# Python 之禅\n\nPython 之禅是 Tim Peters 对 Python 编程思想的诠释。可以在交互式 Python 终端通过`import this`来获取到其内容。\n\n## 内容\n\n> Beautiful is better than ugly.\n>\n> Explicit is better than implicit.\n>\n> Simple is better than complex.\n>\n> Complex is better than complicated.\n>\n> Flat is better than nested.\n>\n> Sparse is better than dense.\n>\n> Readability counts.\n>\n> Special cases aren't special enough to break the rules.\n>\n> Although practicality beats purity.\n>\n> Errors should never pass silently.\n>\n> Unless explicitly silenced.\n>\n> In the face of ambiguity, refuse the temptation to guess.\n>\n> There should be one-- and preferably only one --obvious way to do it.\n>\n> Although that way may not be obvious at first unless you're Dutch.\n>\n> Now is better than never.\n>\n> Although never is often better than _right_ now.\n>\n> If the implementation is hard to explain, it's a bad idea.\n>\n> If the implementation is easy to explain, it may be a good idea.\n>\n> Namespaces are one honking great idea -- let's do more of those!\n","n":0.082}}},{"i":61,"$":{"0":{"v":"Tensorflow","n":1}}},{"i":62,"$":{"0":{"v":"Pytorch","n":1}}},{"i":63,"$":{"0":{"v":"PyQT","n":1}}},{"i":64,"$":{"0":{"v":"Flask","n":1}}},{"i":65,"$":{"0":{"v":"FastAPI","n":1}}},{"i":66,"$":{"0":{"v":"Django","n":1}}},{"i":67,"$":{"0":{"v":"Ansible","n":1}}},{"i":68,"$":{"0":{"v":"元编程","n":1}}},{"i":69,"$":{"0":{"v":"JavaScript","n":1}}},{"i":70,"$":{"0":{"v":"Java","n":1}}},{"i":71,"$":{"0":{"v":"Golang","n":1}}},{"i":72,"$":{"0":{"v":"函数式编程","n":1}}},{"i":73,"$":{"0":{"v":"编程语言分类","n":1}}},{"i":74,"$":{"0":{"v":"C","n":1}}},{"i":75,"$":{"0":{"v":"C++","n":1}}},{"i":76,"$":{"0":{"v":"C#","n":1}}},{"i":77,"$":{"0":{"v":"结构化编程","n":1}}},{"i":78,"$":{"0":{"v":"面向对象编程","n":1}}},{"i":79,"$":{"0":{"v":"开源","n":1}}},{"i":80,"$":{"0":{"v":"开源协议","n":1}}},{"i":81,"$":{"0":{"v":"数据库","n":1}}},{"i":82,"$":{"0":{"v":"Time Series Databases","n":0.577}}},{"i":83,"$":{"0":{"v":"Relational Database","n":0.707}}},{"i":84,"$":{"0":{"v":"SQLLite","n":1}}},{"i":85,"$":{"0":{"v":"MySQL","n":1}}},{"i":86,"$":{"0":{"v":"ORMs","n":1}}},{"i":87,"$":{"0":{"v":"NoSQL","n":1}}},{"i":88,"$":{"0":{"v":"MongoDB","n":1}}},{"i":89,"$":{"0":{"v":"Indexes","n":1}}},{"i":90,"$":{"0":{"v":"Graph Databases","n":0.707}}},{"i":91,"$":{"0":{"v":"CAP","n":1}}},{"i":92,"$":{"0":{"v":"ACID","n":1}}},{"i":93,"$":{"0":{"v":"基础知识","n":1},"1":{"v":"\n## 参考\n\n![[resources.books#基础]]\n","n":0.707}}},{"i":94,"$":{"0":{"v":"软件","n":1}}},{"i":95,"$":{"0":{"v":"操作系统","n":1}}},{"i":96,"$":{"0":{"v":"Threads And Concurrency","n":0.577}}},{"i":97,"$":{"0":{"v":"Process Management","n":0.707}}},{"i":98,"$":{"0":{"v":"POSIX Basics","n":0.707}}},{"i":99,"$":{"0":{"v":"Memory Management","n":0.707}}},{"i":100,"$":{"0":{"v":"Interprocess Communication","n":0.707}}},{"i":101,"$":{"0":{"v":"IO Management","n":0.707}}},{"i":102,"$":{"0":{"v":"硬件","n":1},"1":{"v":"\n## 早期计算设备\n\n- 算盘\n- 计算尺\n- 雅各提花织机（可编程）\n- 差分机\n\n## 电子计算机\n\n- ENIAC\n- EDSAC\n\n## 计算机组成\n\n- [[basic.hardware.cpu]]\n- [[basic.hardware.storage]]\n- [[basic.hardware.IO Devices]]\n","n":0.267}}},{"i":103,"$":{"0":{"v":"存储","n":1}}},{"i":104,"$":{"0":{"v":"RAM","n":1}}},{"i":105,"$":{"0":{"v":"Hard Disks And Secondary Storage","n":0.447}}},{"i":106,"$":{"0":{"v":"CPU","n":1}}},{"i":107,"$":{"0":{"v":"逻辑门","n":1}}},{"i":108,"$":{"0":{"v":"集成电路","n":1}}},{"i":109,"$":{"0":{"v":"IO Devices","n":0.707}}},{"i":110,"$":{"0":{"v":"通信","n":1}}},{"i":111,"$":{"0":{"v":"网络","n":1}}},{"i":112,"$":{"0":{"v":"UDP","n":1}}},{"i":113,"$":{"0":{"v":"TCP","n":1}}},{"i":114,"$":{"0":{"v":"HTTP","n":1}}},{"i":115,"$":{"0":{"v":"DNS","n":1}}},{"i":116,"$":{"0":{"v":"压缩","n":1}}},{"i":117,"$":{"0":{"v":"编码","n":1}}},{"i":118,"$":{"0":{"v":"架构","n":1}}},{"i":119,"$":{"0":{"v":"YAGNI","n":1}}},{"i":120,"$":{"0":{"v":"TDD","n":1}}},{"i":121,"$":{"0":{"v":"SOLID","n":1}}},{"i":122,"$":{"0":{"v":"KISS","n":1}}},{"i":123,"$":{"0":{"v":"Domain Driven Design","n":0.577}}},{"i":124,"$":{"0":{"v":"Design Patterns","n":0.707}}},{"i":125,"$":{"0":{"v":"DRY","n":1}}},{"i":126,"$":{"0":{"v":"Cloud Native","n":0.707}}},{"i":127,"$":{"0":{"v":"PaaS","n":1}}},{"i":128,"$":{"0":{"v":"IaaS","n":1}}},{"i":129,"$":{"0":{"v":"FaaS","n":1}}},{"i":130,"$":{"0":{"v":"关于我","n":1},"1":{"v":"\n## 简介\n\n我是[杜逸先](https://github.com/duyixian1234)，95 年出生的陕西汉子，17 年毕业于浙江大学软件工程专业，目前作为一个研发工程师生活在杭州。\n\n## 技能\n\n### 基础\n\n- [[basic.software.operating-system]]\n- [[basic.communication.network]]\n- [[basic.hardware]]\n\n### 编程语言\n\n| 编程语言                             | 熟练度 | 认可度 | 使用频率 |\n| ------------------------------------ | :----: | ------ | :------- |\n| [[programming-languages.python]]     | ★★★★★  | ★★★★★  | 日常工作 |\n| [[programming-languages.javascript]] |  ★★★   | ★★     | 日常工作 |\n| [[programming-languages.typescript]] |  ★★★   | ★★★★★  | 日常工作 |\n| [[programming-languages.java]]       |  ★★★   | ★★★★   | 偶尔     |\n| [[programming-languages.c]]          |  ★★★   | ★★★★   | 偶尔     |\n| [[programming-languages.c++]]        |  ★★★   | ★★★★   | 偶尔     |\n| [[programming-languages.rust]]       |   ★★   | ★★★★★  | 兴趣学习 |\n| [[programming-languages.golang]]     |   ★    | ★★★    | 兴趣学习 |\n\n### 框架\n\n#### 后端框架\n\n| 框架                                                  | 熟练度 | 认可度 | 使用频率 |\n| ----------------------------------------------------- | ------ | ------ | -------- |\n| [Flask](https://flask.palletsprojects.com/en/2.2.x/)  | ★★★★★  | ★★★★★  | 日常工作 |\n| [FastAPI](https://fastapi.tiangolo.com)               | ★★★★   | ★★★★★  | 日常工作 |\n| [Spring Boot](https://spring.io/projects/spring-boot) | ★★★    | ★★★★★  | 偶尔     |\n\n#### 前端框架\n\n| 框架                             | 熟练度 | 认可度 | 使用频率 |\n| -------------------------------- | ------ | ------ | -------- |\n| [React.js](https://reactjs.org/) | ★★★    | ★★★★★  | 日常工作 |\n| [Angular](https://angular.io/)   | ★★★    | ★★★★   | 兴趣学习 |\n\n### 软件开发\n\n- [[architecture.TDD]]\n- [[software-develop.refactoring]]\n- [[programming-languages.functional programming]]\n\n### DevOps\n\n- [[software-develop.CI]] [[software-develop.CD]]\n- [[software-develop.VCS.git]]\n- [Docker](https://www.docker.com/)\n- [Docker Compose](https://docs.docker.com/compose/)\n- [Kubernetes](https://kubernetes.io/)\n\n#### 平台与工具\n\n- [GitHub](https://github.com/)\n- [Visual Studio Code](https://code.visualstudio.com/)\n\n## 项目经历\n","n":0.074}}}]}
